using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using UnisHrSystemModel;

public partial class Pages_PolicySetUp : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!Page.IsPostBack)
        {
            BindDropdownlist();
            txtEffectiveFrom.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txtTill.Text = DateTime.Now.ToString("dd/MM/yyyy");
            BindType();
            BindGrid();
        }
    }
    public void BindDropdownlist()
    {
        try
        {
            drpAcd.DataSource = CGeneralFunction.filldata("SELECT ID,FNAME AS ACCADEMICYEAR from HR_FINANCIAL_YEAR where ACTIVE='Y'");
            drpAcd.DataTextField = "ACCADEMICYEAR";
            drpAcd.DataValueField = "ID";
            drpAcd.DataBind();

            drpGroup.Items.Insert(0, new ListItem("Select", "0"));

            drpDesg.DataSource = CGeneralFunction.filldata("select 0 as SN,0 as JOB_ID,'All' as JOB_NAME union all select 1 as SN,JOB_ID,JOB_NAME from HR_JOB order by SN,JOB_NAME");
            drpDesg.DataTextField = "JOB_NAME";
            drpDesg.DataValueField = "JOB_ID";
            drpDesg.DataBind();

            drpGrade.DataSource = CGeneralFunction.filldata("select 0 as SN,0 as GRADE_ID,'All' as GRADE_NAME union all select 1 as SN,GRADE_ID,GRADE_NAME from HR_GRADE order by SN,GRADE_NAME");
            drpGrade.DataTextField = "GRADE_NAME";
            drpGrade.DataValueField = "GRADE_ID";
            drpGrade.DataBind();

            lstDept.DataSource = CGeneralFunction.filldata("select DEPARTMENT_ID,DEPARTMENT_NAME from HR_DEPARTMENT ORDER BY DEPARTMENT_NAME");
            lstDept.DataTextField = "DEPARTMENT_NAME";
            lstDept.DataValueField = "DEPARTMENT_ID";
            lstDept.DataBind();
        }
        catch (Exception Ex)
        { }
    }
    protected void btnAddNew_Click(object sender, EventArgs e)
    {
        try
        {
            drpAcd.SelectedIndex = -1;
            drpDesg.SelectedIndex = -1;
            drpGrade.SelectedIndex = -1;
            drpGroup.SelectedIndex = -1;
            drpSubCat.SelectedIndex = -1;
            drpType.SelectedIndex = -1;
            txtEffectiveFrom.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txtTill.Text = DateTime.Now.ToString("dd/MM/yyyy");
            TxtMax.Text = "0";
            TxtMin.Text = "0";
            chkFamily.Checked = false;
            chkFinace.Checked = false;
            txtRemarks.Text = "";
            tr1.Visible = false;
            tr2.Visible = false;
            tr3.Visible = false;
            tr4.Visible = false;
            tr5.Visible = false;
            tr6.Visible = false;
            trsem1.Visible = false;
            trsem2.Visible = false;


        }
        catch (Exception Ex)
        {

        }
    }


    protected void txtMultilineBanks_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName == "Delete")
        {
            Settings s = new Settings();
            s.InsertPolicyMaster(Convert.ToInt32(e.CommandArgument), 0, "", 0, "", 0, true, true, true, "", "", 0, 0, 0, 0, "", "", "Delete", 0, 0, 0, 0);
        }
        if (e.CommandName == "Activate")
        {
            Settings s = new Settings();
            s.InsertPolicyMaster(Convert.ToInt32(e.CommandArgument), 0, "", 0, "", 0, true, true, true, "", "", 0, 0, 0, 0, "", "", "Update", 0, 0, 0, 0);
        }
        if (e.CommandName == "EditPol")
        {
            Settings s = new Settings();
            Int32 Pid = Convert.ToInt32(e.CommandArgument);
            DataTable dt = s.PolicyMaster(Convert.ToInt32(e.CommandArgument), 0, "", 0, "", 0, true, true, true, "", "", 0, 0, 0, 0, "", "", "Select", 0, 0, 0, 0);
        }
    }

    public void FillValues(DataTable dt)
    {
        try
        {
            if (dt != null && dt.Rows.Count > 0)
            {
                drpAcd.SelectedValue = Convert.ToString(dt.Rows[0]["A_Year"]);
                drpType.SelectedValue = Convert.ToString(dt.Rows[0]["P_Type"]);
                drpSubCat.SelectedValue = Convert.ToString(dt.Rows[0]["Type_ID"]);
                drpDesg.SelectedValue = Convert.ToString(dt.Rows[0]["Desg_ID"]);
                lstDept.SelectedValue = Convert.ToString(dt.Rows[0]["DeptID"]);
                chkFamily.Checked = Convert.ToBoolean(dt.Rows[0]["IsFamily"]);
                chkFinace.Checked = Convert.ToBoolean(dt.Rows[0]["IsFinance"]);
                TxtMin.Text = Convert.ToString(dt.Rows[0]["MinValue"]);
                TxtMax.Text = Convert.ToString(dt.Rows[0]["MaxValue"]);
                drpGrade.SelectedValue = Convert.ToString(dt.Rows[0]["Grade_ID"]);
                drpGroup.SelectedValue = Convert.ToString(dt.Rows[0]["Tps_GroupID"]);
                txtEffectiveFrom.Text = Convert.ToString(dt.Rows[0]["Effective_From"]);
                txtTill.Text = Convert.ToString(dt.Rows[0]["Effective_Till"]);
                txtRemarks.Text = Convert.ToString(dt.Rows[0]["Remarks"]);
                txtMaxDhs.Text = Convert.ToString(dt.Rows[0]["LMaxDhs"]);
                txtpartFees.Text = Convert.ToString(dt.Rows[0]["LParticipationFees"]);
                txtperday.Text = Convert.ToString(dt.Rows[0]["LPerDein"]);
                TextBox1.Text = Convert.ToString(dt.Rows[0]["LSMaxDhs"]);
                TextBox2.Text = Convert.ToString(dt.Rows[0]["LSParticipationFees"]);
                TextBox3.Text = Convert.ToString(dt.Rows[0]["LSPerDein"]);
                TextBox4.Text = Convert.ToString(dt.Rows[0]["RMaxDhs"]);
                TextBox5.Text = Convert.ToString(dt.Rows[0]["RParticipationFees"]);
                TextBox6.Text = Convert.ToString(dt.Rows[0]["RPerDein"]);
                TextBox7.Text = Convert.ToString(dt.Rows[0]["IMaxDhs"]);
                TextBox8.Text = Convert.ToString(dt.Rows[0]["IParticipationFees"]);
                TextBox9.Text = Convert.ToString(dt.Rows[0]["IPerDein"]);
                txtchildren.Text = Convert.ToString(dt.Rows[0]["NoofChildren"]);
                txtAge.Text = Convert.ToString(dt.Rows[0]["Age"]);

            }
        }
        catch (Exception Ex)
        { }
    }
    protected void btnUpdate_Click(object sender, EventArgs e)
    {
        try
        {
            string edate = string.Empty;
            string efdate = string.Empty;
            Settings s = new Settings();
            if (drpAcd.Text == "")
            {
                lblmsg.Text = "Please Select the academic year.";
                return;
            }
            if (drpType.Text == "")
            {
                lblmsg.Text = "Please Select the Policy Type.";
                return;
            }
            if (drpSubCat.Text == "")
            {
                lblmsg.Text = "Please Select the Policy Category.";
                return;
            }
            if (drpDesg.Text == "")
            {
                lblmsg.Text = "Please Select the Designation.";
                return;
            }
            if (lstDept.Text == "")
            {
                lblmsg.Text = "Please Select the Department.";
                return;
            }
            if (chkFinace.Checked)
            {
                if (drpGroup.Text == "")
                {
                    lblmsg.Text = "Please Select the Policy Fee Group.";
                    return;
                }
            }
            if (drpGrade.Text == "")
            {
                lblmsg.Text = "Please Select the Policy Fee Group.";
                return;
            }
            if (txtEffectiveFrom.Text == "")
            {
                lblmsg.Text = "Please Select the Effective date.";
                return;

            }
            if (txtTill.Text == "")
            {
                lblmsg.Text = "Please Select the Effective Till date.";
                return;

            }
            if (txtRemarks.Text == "")
            {
                lblmsg.Text = "Please Select the Remarks.";
                return;
            }
            if (txtMaxDhs.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (txtpartFees.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (txtperday.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox1.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox2.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox3.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox4.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox5.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox6.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox7.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox8.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }
            if (TextBox9.Text == "")
            {
                lblmsg.Text = "Please enter the value.";
                return;
            }


            if (drpGrade.Text == "")
            {
                lblmsg.Text = "Please Select the Policy Fee Group.";
                return;
            }
            if (hdId.Value == "" || hdId.Value == "0")
            {
                foreach (ListItem item in drpDesg.Items)
                {
                    if (item.Selected == true)
                    {
                        if (drpSubCat.SelectedValue == "27")
                        {
                            s.InsertPolicyMasterResearch(0, Convert.ToInt32(drpAcd.SelectedValue), drpType.SelectedValue, Convert.ToInt32(drpSubCat.SelectedValue), drpSubCat.SelectedItem.Text.Trim(),
                               Convert.ToInt32(item.Value), Convert.ToDecimal(txtMaxDhs.Text), false, chkFinace.Checked, Convert.ToDecimal(txtpartFees.Text), Convert.ToDecimal(txtperday.Text),
                               Convert.ToDecimal(TextBox1.Text), Convert.ToDecimal(TextBox2.Text),
                               Convert.ToInt32(drpGroup.SelectedValue), Convert.ToInt32(drpGrade.SelectedValue), "", txtRemarks.Text, "Insert", Convert.ToInt32(drpFrequesncy.SelectedValue),
                               Convert.ToDecimal(TextBox3.Text), Convert.ToDecimal(TextBox4.Text), Convert.ToDecimal(TextBox5.Text),
                               Convert.ToDecimal(TextBox6.Text), Convert.ToDecimal(TextBox7.Text), Convert.ToDecimal(TextBox8.Text), Convert.ToDecimal(TextBox9.Text), Convert.ToInt32(lstDept.SelectedValue));
                        }
                        else
                        {
                            s.InsertPolicyMaster(0, Convert.ToInt32(drpAcd.SelectedValue), drpType.SelectedValue, Convert.ToInt32(drpSubCat.SelectedValue), drpSubCat.SelectedItem.Text.Trim(),
                               Convert.ToInt32(item.Value), chkFamily.Checked, false, chkFinace.Checked,
                                edate, efdate, Convert.ToDecimal(TxtMin.Text), Convert.ToDecimal(TxtMax.Text), Convert.ToInt32(drpGroup.SelectedValue)
                                , Convert.ToInt32(drpGrade.SelectedValue), "", txtRemarks.Text, "Insert", Convert.ToInt32(drpFrequesncy.SelectedValue),
                                Convert.ToInt32(txtchildren.Text), Convert.ToInt32(txtAge.Text), Convert.ToInt32(lstDept.SelectedValue));
                        }
                    }
                }
                lblmsg.Text = "Data saved successfully";
                BindGrid();
            }



        }
        catch (Exception Ex)
        { }
    }
    protected void btnDelete_Click(object sender, EventArgs e)
    {
        try { }
        catch (Exception Ex)
        {

        }
    }
    public void BindGrid()
    {
        try
        {
            Settings s = new Settings();
            GridBenefits.DataSource = s.PolicyMaster(0, 0, "", 0, "", 0, true, true, true, "", "", 0, 0, 0, 0, "", "", "Benefits", 0, 0, 0, 0);
            GridBenefits.DataBind();
            GridLeaves.DataSource = s.PolicyMaster(0, 0, "", 0, "", 0, true, true, true, "", "", 0, 0, 0, 0, "", "", "leaves", 0, 0, 0, 0);
            GridLeaves.DataBind();
        }
        catch (Exception Ex)
        { }

    }
    protected void drpType_SelectedIndexChanged(object sender, EventArgs e)
    {
        BindType();
    }
    public void BindType()
    {
        try
        {

            if (drpType.SelectedValue == "B")
            {
                drpSubCat.DataSource = CGeneralFunction.filldata("select 0 as SN,0 as BenefitID,'All' as BenefitName union all select 1 as SN,BenefitID,BenefitName from HR_BENEFIT order by SN,BenefitName");
                drpSubCat.DataTextField = "BenefitName";
                drpSubCat.DataValueField = "BenefitID";
                drpSubCat.DataBind();
                drpFrequesncy.DataSource = CGeneralFunction.filldata("select 0 as SN,0 as BenefitID,'All' as Benefitfrequency union all select 1 as SN,BenefitID,Benefitfrequency from HR_BENEFIT order by SN,Benefitfrequency");
                drpFrequesncy.DataTextField = "Benefitfrequency";
                drpFrequesncy.DataValueField = "BenefitID";
                drpFrequesncy.DataBind();
                trLeave.Visible = false;
                trFamily.Visible = true;
                trBenifit.Visible = false;

            }
            else if (drpType.SelectedValue == "L")
            {
                drpSubCat.DataSource = CGeneralFunction.filldata("select 0 as SN,0 as id,'All' as leavetype union all select 1 as SN,id,leavetype from HR_LEAVETYPE order by SN,leavetype");
                drpSubCat.DataTextField = "leavetype";
                drpSubCat.DataValueField = "id";
                drpSubCat.DataBind();

                trFamily.Visible = false;
                trLeave.Visible = true;
                trBenifit.Visible = false;
            }
        }
        catch (Exception EX)
        {

        }
    }
    protected void chkFamily_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chkFamily.Checked)
                trBenifit.Visible = true;
            else
            {
                trBenifit.Visible = false;
            }
        }
        catch (Exception Ex) { }
    }
    protected void GridBenefits_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            Label lbl = (Label)e.Row.FindControl("lblActive");
            LinkButton lnk = (LinkButton)e.Row.FindControl("lnkEdit");
            LinkButton lnkDelete = (LinkButton)e.Row.FindControl("lnkDelete");
            if (lbl.Text == "True")
            {
                lbl.Visible = true;
                lnk.Visible = false;
                lnkDelete.Visible = false;
            }


        }
    }
    protected void chkYear_CheckedChanged(object sender, EventArgs e)
    {
        if (chkYear.Checked)
        {
            trDate.Visible = false;
            tdYear1.Visible = true;
            tdYear2.Visible = true;
        }
        else
        {
            trDate.Visible = true;
        }
    }
    protected void chkDate_CheckedChanged(object sender, EventArgs e)
    {
        if (chkDate.Checked)
        {
            trDate.Visible = true;
            tdYear1.Visible = false;
            tdYear2.Visible = false;
        }
        else
        {
            trDate.Visible = false;
        }
    }
    protected void drpSubCat_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (drpSubCat.SelectedValue == "27")
            {
                trsem1.Visible = true;
                trsem2.Visible = true;
                tr1.Visible = true;
                tr2.Visible = true;
                tr3.Visible = true;
                tr4.Visible = true;
                tr5.Visible = true;
                tr6.Visible = true;
            }
            else
            {
                trsem1.Visible = false;
                trsem2.Visible = false;
                tr1.Visible = false;
                tr2.Visible = false;
                tr3.Visible = false;
                tr4.Visible = false;
                tr5.Visible = false;
                tr6.Visible = false;

            }
        }
        catch (Exception Ex) { }
    }
}
